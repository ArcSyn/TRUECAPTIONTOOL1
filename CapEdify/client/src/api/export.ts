import api from './api';
import { Caption } from '@/types';

export async function getExportFormats() {
  try {
    const response = await api.get('/api/export/formats');
    return response.data;
  } catch (error) {
    console.error('Error getting export formats:', error);
    throw error;
  }
}

export async function getStyles() {
  try {
    const response = await api.get('/api/export/styles');
    return response.data.styles;
  } catch (error) {
    console.error('Error getting styles:', error);
    throw error;
  }
}

export async function getPreview(transcriptionId: string, format: string, styles?: any) {
  try {
    const response = await api.post('/api/export/preview', {
      transcriptionId,
      format,
      styles
    });
    return response.data;
  } catch (error) {
    console.error('Error getting preview:', error);
    throw error;
  }
}

// Description: Generate After Effects JSX export
// Endpoint: POST /api/export/after-effects
// Request: { captions: Caption[], projectName: string }
// Response: { success: boolean, jsxCode: string }
export const generateAfterEffectsExport = (captions: Caption[], projectName: string) => {
  console.log('Generating After Effects export for:', projectName);
  // Mocking the response
  return new Promise<{ success: boolean; jsxCode: string }>((resolve) => {
    setTimeout(() => {
      const jsxCode = `// After Effects Caption Script - ${projectName}
// Generated by CaptionFlow

var comp = app.project.activeItem;
if (comp && comp instanceof CompItem) {
    app.beginUndoGroup("Add Captions");
    
    var captions = ${JSON.stringify(captions, null, 4)};
    
    for (var i = 0; i < captions.length; i++) {
        var caption = captions[i];
        var textLayer = comp.layers.addText(caption.text);
        textLayer.name = "Caption " + (i + 1);
        
        // Set timing
        textLayer.inPoint = caption.startTime;
        textLayer.outPoint = caption.endTime;
        
        // Basic text styling
        var textProp = textLayer.property("Source Text");
        var textDocument = textProp.value;
        textDocument.fontSize = 48;
        textDocument.fillColor = [1, 1, 1];
        textDocument.strokeColor = [0, 0, 0];
        textDocument.strokeWidth = 2;
        textDocument.justification = ParagraphJustification.CENTER_JUSTIFY;
        textProp.setValue(textDocument);
        
        // Position at bottom center
        textLayer.property("Position").setValue([comp.width/2, comp.height * 0.85]);
    }
    
    app.endUndoGroup();
    alert("Captions added successfully!");
} else {
    alert("Please select a composition first.");
}`;
      
      resolve({
        success: true,
        jsxCode
      });
    }, 1000);
  });
  // Uncomment the below lines to make an actual API call
  // try {
  //   return await api.post('/api/export/after-effects', { captions, projectName });
  // } catch (error) {
  //   throw new Error(error?.response?.data?.message || error.message);
  // }
};

// Description: Generate React JSX component export
// Endpoint: POST /api/export/react
// Request: { captions: Caption[], componentName: string }
// Response: { success: boolean, jsxCode: string }
export const generateReactExport = (captions: Caption[], componentName: string) => {
  console.log('Generating React export for:', componentName);
  // Mocking the response
  return new Promise<{ success: boolean; jsxCode: string }>((resolve) => {
    setTimeout(() => {
      const jsxCode = `import React, { useState, useEffect } from 'react';

interface Caption {
  id: string;
  startTime: number;
  endTime: number;
  text: string;
}

interface ${componentName}Props {
  currentTime: number;
  className?: string;
}

const ${componentName}: React.FC<${componentName}Props> = ({ currentTime, className = '' }) => {
  const [currentCaption, setCurrentCaption] = useState<Caption | null>(null);
  
  const captions: Caption[] = ${JSON.stringify(captions, null, 4)};
  
  useEffect(() => {
    const activeCaption = captions.find(
      caption => currentTime >= caption.startTime && currentTime <= caption.endTime
    );
    setCurrentCaption(activeCaption || null);
  }, [currentTime]);
  
  if (!currentCaption) {
    return null;
  }
  
  return (
    <div className={\`fixed bottom-20 left-1/2 transform -translate-x-1/2 z-50 \${className}\`}>
      <div className="bg-black bg-opacity-75 text-white px-4 py-2 rounded-lg text-center max-w-2xl">
        <p className="text-lg font-medium">{currentCaption.text}</p>
      </div>
    </div>
  );
};

export default ${componentName};`;
      
      resolve({
        success: true,
        jsxCode
      });
    }, 800);
  });
  // Uncomment the below lines to make an actual API call
  // try {
  //   return await api.post('/api/export/react', { captions, componentName });
  // } catch (error) {
  //   throw new Error(error?.response?.data?.message || error.message);
  // }
};