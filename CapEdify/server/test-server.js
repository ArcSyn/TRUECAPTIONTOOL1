// Minimal test server
require("dotenv").config();
const express = require("express");
const cors = require("cors");
const path = require("path");
const fs = require("fs");

const app = express();
const PORT = 4000;

app.use(cors());
app.use(express.json());

// Test health endpoint
app.get('/health', (req, res) => {
  res.json({
    status: 'âœ… Test Server is working!',
    timestamp: new Date().toISOString(),
    port: PORT
  });
});

// Test video upload endpoint
app.post('/api/videos/upload', (req, res) => {
  res.json({
    success: true,
    message: 'Upload endpoint working',
    video: { id: 'test-123', url: 'test-url' },
    transcription: { id: 'trans-123', status: 'pending' }
  });
});

// Test transcribe endpoint
app.post('/api/transcribe', (req, res) => {
  res.json({
    success: true,
    message: 'Transcription started'
  });
});

// Test JSX Styles endpoint
app.get('/api/export/jsx/styles', (req, res) => {
  res.json({
    success: true,
    styles: [
      {
        name: 'modern',
        displayName: 'Modern',
        config: {
          font: 'Montserrat',
          fontSize: 42,
          color: [1, 1, 1],
          strokeColor: [0, 0, 0],
          strokeWidth: 2,
          position: [0.5, 0.9],
          justification: 'center',
          animation: 'fade',
          shadow: true,
          shadowColor: [0, 0, 0, 0.7],
          shadowDistance: 7
        }
      },
      {
        name: 'minimal',
        displayName: 'Minimal',
        config: {
          font: 'Arial',
          fontSize: 36,
          color: [1, 1, 1],
          strokeColor: [0, 0, 0],
          strokeWidth: 0,
          position: [0.5, 0.9],
          justification: 'center',
          animation: 'none',
          shadow: false
        }
      },
      {
        name: 'bold',
        displayName: 'Bold & Dramatic',
        config: {
          font: 'Impact',
          fontSize: 48,
          color: [1, 1, 1],
          strokeColor: [0, 0, 0],
          strokeWidth: 5,
          position: [0.5, 0.9],
          justification: 'center',
          animation: 'scale',
          shadow: true,
          shadowColor: [0, 0, 0, 0.8],
          shadowDistance: 10
        }
      }
    ]
  });
});

// Test JSX Enhanced endpoint
app.post('/api/export/jsx/enhanced', (req, res) => {
  const { transcriptionId, styleName = 'modern', sceneMode = false } = req.body;
  
  console.log('JSX Export request received:', { transcriptionId, styleName, sceneMode });
  
  if (sceneMode) {
    // Return scene data
    res.json({
      success: true,
      type: 'multi-file',
      files: {
        scene_1: {
          filename: 'scene_1_modern.jsx',
          content: '// Scene 1 JSX Code - Test Response\n// Generated by test server\n\nalert("This is a test scene 1");'
        },
        scene_2: {
          filename: 'scene_2_modern.jsx',
          content: '// Scene 2 JSX Code - Test Response\n// Generated by test server\n\nalert("This is a test scene 2");'
        }
      },
      metadata: {
        sceneCount: 2,
        styleName,
        transcriptionId
      }
    });
  } else {
    // Return JSX content directly
    const jsxCode = `// Test JSX Code - ${styleName} style
// Generated by test server for transcription ${transcriptionId}

var comp = app.project.activeItem;
if (comp && comp instanceof CompItem) {
    app.beginUndoGroup("Add Captions");
    
    var captions = [
        { id: "1", startTime: 0, endTime: 3, text: "This is a test caption" },
        { id: "2", startTime: 3.5, endTime: 6, text: "Generated by the test server" },
        { id: "3", startTime: 6.5, endTime: 10, text: "For testing exports" }
    ];
    
    for (var i = 0; i < captions.length; i++) {
        var caption = captions[i];
        var textLayer = comp.layers.addText(caption.text);
        textLayer.name = "Caption " + (i + 1);
        
        // Set timing
        textLayer.inPoint = caption.startTime;
        textLayer.outPoint = caption.endTime;
        
        // Basic text styling
        var textProp = textLayer.property("Source Text");
        var textDocument = textProp.value;
        textDocument.fontSize = 48;
        textDocument.fillColor = [1, 1, 1];
        textDocument.strokeColor = [0, 0, 0];
        textDocument.strokeWidth = 2;
        textDocument.justification = ParagraphJustification.CENTER_JUSTIFY;
        textProp.setValue(textDocument);
        
        // Position at bottom center
        textLayer.property("Position").setValue([comp.width/2, comp.height * 0.85]);
    }
    
    app.endUndoGroup();
    alert("Test captions added successfully!");
} else {
    alert("Please select a composition first.");
}`;

    res.set({
      'Content-Type': 'application/javascript',
      'Content-Disposition': `attachment; filename="${styleName}_captions.jsx"`
    });
    
    res.send(jsxCode);
  }
});

// Test JSX React endpoint
app.post('/api/export/jsx/react', (req, res) => {
  const { componentName = 'Captions' } = req.body;
  
  const jsxCode = `import React, { useState, useEffect } from 'react';

interface Caption {
  id: string;
  startTime: number;
  endTime: number;
  text: string;
}

interface ${componentName}Props {
  currentTime: number;
  className?: string;
}

const ${componentName}: React.FC<${componentName}Props> = ({ currentTime, className = '' }) => {
  const [currentCaption, setCurrentCaption] = useState<Caption | null>(null);
  
  const captions: Caption[] = [
    { id: "1", startTime: 0, endTime: 3, text: "This is a test caption" },
    { id: "2", startTime: 3.5, endTime: 6, text: "Generated by the test server" },
    { id: "3", startTime: 6.5, endTime: 10, text: "For testing exports" }
  ];
  
  useEffect(() => {
    const activeCaption = captions.find(
      caption => currentTime >= caption.startTime && currentTime <= caption.endTime
    );
    setCurrentCaption(activeCaption || null);
  }, [currentTime]);
  
  if (!currentCaption) {
    return null;
  }
  
  return (
    <div className={\`fixed bottom-20 left-1/2 transform -translate-x-1/2 z-50 \${className}\`}>
      <div className="max-w-2xl px-4 py-2 text-center text-white bg-black bg-opacity-75 rounded-lg">
        <p className="text-lg font-medium">{currentCaption.text}</p>
      </div>
    </div>
  );
};

export default ${componentName};`;

  res.json({
    success: true,
    jsxCode
  });
});

app.listen(PORT, () => {
  console.log(`ðŸš€ Test Server running on http://localhost:${PORT}`);
  console.log(`ðŸ“Š Health check: http://localhost:${PORT}/health`);
  console.log(`ðŸŽ¬ JSX Export: http://localhost:${PORT}/api/export/jsx/enhanced`);
});
