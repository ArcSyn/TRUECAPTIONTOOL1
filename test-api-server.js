// Simple test server to verify connection
require("dotenv").config();
const express = require("express");
const cors = require("cors");

const app = express();
const PORT = 4000;

app.use(cors());
app.use(express.json());

// Test health endpoint
app.get('/health', (req, res) => {
  res.json({
    status: 'âœ… Test Server is working!',
    timestamp: new Date().toISOString(),
    port: PORT
  });
});

// Test endpoint to verify frontend is calling the API correctly
app.get('/api/export/jsx/styles', (req, res) => {
  console.log('GET /api/export/jsx/styles called');
  res.json({
    success: true,
    styles: [
      {
        name: 'modern',
        displayName: 'Modern',
        config: {
          font: 'Arial',
          fontSize: 48,
          color: [255, 255, 255],
          strokeColor: [0, 0, 0],
          strokeWidth: 2,
          position: [0.5, 0.9],
          justification: 'center',
          animation: 'fade',
          shadow: true,
          shadowColor: [0, 0, 0, 0.5],
          shadowDistance: 4
        }
      },
      {
        name: 'minimal',
        displayName: 'Minimal',
        config: {
          font: 'Helvetica',
          fontSize: 36,
          color: [255, 255, 255],
          strokeColor: null,
          strokeWidth: 0,
          position: [0.5, 0.85],
          justification: 'center',
          animation: 'none',
          shadow: false
        }
      },
      {
        name: 'bold',
        displayName: 'Bold',
        config: {
          font: 'Impact',
          fontSize: 52,
          color: [255, 255, 255],
          strokeColor: [0, 0, 0],
          strokeWidth: 4,
          position: [0.5, 0.9],
          justification: 'center',
          animation: 'scale',
          shadow: true,
          shadowColor: [0, 0, 0, 0.8],
          shadowDistance: 6
        }
      }
    ]
  });
});

// Mock endpoint for enhanced JSX export
app.post('/api/export/jsx/enhanced', (req, res) => {
  console.log('POST /api/export/jsx/enhanced called with:', req.body);
  
  // Simulate processing time
  setTimeout(() => {
    // Check if scene mode is enabled
    if (req.body.sceneMode) {
      res.json({
        success: true,
        type: 'multi-file',
        files: {
          'scene1.jsx': '// Scene 1 JSX code',
          'scene2.jsx': '// Scene 2 JSX code',
          'scene3.jsx': '// Scene 3 JSX code'
        },
        metadata: {
          totalScenes: 3,
          totalCaptions: req.body.captions?.length || 0
        }
      });
    } else {
      // Single file mode
      res.setHeader('Content-Type', 'application/octet-stream');
      res.setHeader('Content-Disposition', `attachment; filename="${req.body.projectName || 'captions'}.jsx"`);
      
      const jsxContent = `// After Effects JSX Caption Script
// Generated by CapEdify
// Style: ${req.body.styleName || 'modern'}

var comp = app.project.activeItem;
if (comp && comp instanceof CompItem) {
    app.beginUndoGroup("Add Captions");
    
    // Your captions data
    var captions = ${JSON.stringify(req.body.captions || [], null, 2)};
    
    // Add captions to composition
    for (var i = 0; i < captions.length; i++) {
        var caption = captions[i];
        var textLayer = comp.layers.addText(caption.text);
        textLayer.name = "Caption " + (i + 1);
        
        // Set timing
        textLayer.inPoint = caption.startTime;
        textLayer.outPoint = caption.endTime;
        
        // Apply styling based on selected style
        var textProp = textLayer.property("Source Text");
        var textDocument = textProp.value;
        textDocument.fontSize = 48;
        textDocument.fillColor = [1, 1, 1];
        textDocument.strokeColor = [0, 0, 0];
        textDocument.strokeWidth = 2;
        textDocument.justification = ParagraphJustification.CENTER_JUSTIFY;
        textProp.setValue(textDocument);
        
        // Position at bottom center
        textLayer.property("Position").setValue([comp.width/2, comp.height * 0.9]);
    }
    
    app.endUndoGroup();
    alert("Captions added successfully!");
} else {
    alert("Please select a composition first.");
}`;
      
      res.send(jsxContent);
    }
  }, 800);
});

// Default exports
app.get('/api/export/formats', (req, res) => {
  console.log('GET /api/export/formats called');
  res.json({
    formats: ['srt', 'vtt', 'ass', 'jsx', 'react']
  });
});

// Styles endpoint
app.get('/api/export/styles', (req, res) => {
  console.log('GET /api/export/styles called');
  res.json({
    styles: {
      fonts: [
        { id: 'arial', name: 'Arial' },
        { id: 'helvetica', name: 'Helvetica' },
        { id: 'georgia', name: 'Georgia' }
      ],
      colors: [
        { id: 'white', name: 'White', hex: '#FFFFFF' },
        { id: 'yellow', name: 'Yellow', hex: '#FFFF00' },
        { id: 'cyan', name: 'Cyan', hex: '#00FFFF' }
      ],
      effects: [
        { id: 'none', name: 'None' },
        { id: 'fade', name: 'Fade In/Out' },
        { id: 'slide', name: 'Slide Up' }
      ],
      positions: [
        { id: 'bottom', name: 'Bottom' },
        { id: 'top', name: 'Top' },
        { id: 'middle', name: 'Middle' }
      ],
      alignments: [
        { id: 'center', name: 'Center' },
        { id: 'left', name: 'Left' },
        { id: 'right', name: 'Right' }
      ]
    }
  });
});

app.listen(PORT, () => {
  console.log(`ðŸš€ Test Server running on http://localhost:${PORT}`);
  console.log(`ðŸ“Š Health check: http://localhost:${PORT}/health`);
  console.log(`ðŸŽ¬ JSX Styles API: http://localhost:${PORT}/api/export/jsx/styles`);
  console.log(`ðŸ“¤ JSX Export API: http://localhost:${PORT}/api/export/jsx/enhanced`);
});
